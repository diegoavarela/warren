import puppeteer from 'puppeteer'
import { CompanyConfig } from './configurationService'

interface PuppeteerPDFOptions {
  company: CompanyConfig
  title: string
  type: 'pnl' | 'cashflow'
  dashboardUrl: string
}

export class PuppeteerPDFService {
  public static async exportDashboardPDF(options: PuppeteerPDFOptions): Promise<void> {
    const { company, title, type, dashboardUrl } = options

    let browser: puppeteer.Browser | null = null

    try {
      // Launch browser with optimized settings for PDF generation
      browser = await puppeteer.launch({
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-gpu',
          '--no-first-run',
          '--no-default-browser-check',
          '--disable-default-apps',
          '--disable-extensions',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-features=TranslateUI',
          '--disable-ipc-flooding-protection',
        ]
      })

      const page = await browser.newPage()

      // Set viewport for consistent rendering
      await page.setViewport({
        width: 1200,
        height: 800,
        deviceScaleFactor: 2 // High DPI for crisp text
      })

      // Navigate to the dashboard
      console.log('Navigating to dashboard...')
      await page.goto(dashboardUrl, {
        waitUntil: 'networkidle2',
        timeout: 30000
      })

      // Wait for the dashboard to fully load
      await page.waitForSelector('[data-testid="dashboard-content"], #pnl-dashboard-content, #cashflow-dashboard-content', {
        timeout: 10000
      })

      // Additional wait for charts and dynamic content
      await page.waitForTimeout(3000)

      // Hide elements that shouldn't be in PDF
      await page.addStyleTag({
        content: `
          .pdf-hide,
          .no-print,
          button[aria-label*="export"],
          button[aria-label*="Export"],
          [id*="export"],
          [class*="export"] {
            display: none !important;
          }
          
          /* Ensure print-friendly styling */
          body {
            background: white !important;
          }
          
          /* Optimize for PDF */
          .dashboard-container,
          .max-w-7xl {
            max-width: none !important;
            margin: 0 !important;
            padding: 20px !important;
          }
          
          /* Ensure charts are visible */
          canvas {
            max-width: 100% !important;
            height: auto !important;
          }
          
          /* Hide scrollbars */
          ::-webkit-scrollbar {
            display: none;
          }
          
          /* Ensure cards and widgets are properly spaced */
          .grid {
            gap: 1rem !important;
          }
        `
      })

      // Add company branding to the page
      await page.evaluate((companyName, reportTitle) => {
        // Add header with company branding
        const header = document.createElement('div')
        header.innerHTML = `
          <div style="
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 60px;
            background: linear-gradient(135deg, #7CB342 0%, #2E7D32 100%);
            color: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 30px;
            font-family: 'Helvetica', sans-serif;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          ">
            <div style="font-size: 20px; font-weight: bold;">${companyName}</div>
            <div style="font-size: 16px;">${reportTitle}</div>
            <div style="font-size: 14px;">${new Date().toLocaleDateString()}</div>
          </div>
        `
        document.body.prepend(header)

        // Add footer
        const footer = document.createElement('div')
        footer.innerHTML = `
          <div style="
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 40px;
            background: #f8f9fa;
            border-top: 2px solid #7CB342;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Helvetica', sans-serif;
            font-size: 12px;
            color: #666;
            z-index: 1000;
          ">
            <span>CONFIDENTIAL - ${companyName} Financial Report - Generated by Warren Dashboard</span>
          </div>
        `
        document.body.appendChild(footer)

        // Adjust main content to account for header/footer
        const mainContent = document.querySelector('.max-w-7xl') || document.body
        if (mainContent) {
          (mainContent as HTMLElement).style.marginTop = '80px'
          (mainContent as HTMLElement).style.marginBottom = '60px'
        }
      }, company.name, title)

      // Generate PDF with premium settings
      console.log('Generating PDF...')
      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '0.5in',
          bottom: '0.5in',
          left: '0.5in',
          right: '0.5in'
        },
        displayHeaderFooter: false, // We're using custom header/footer
        preferCSSPageSize: false,
        scale: 0.8 // Slightly scale down to fit more content
      })

      // Create download
      const blob = new Blob([pdfBuffer], { type: 'application/pdf' })
      const url = URL.createObjectURL(blob)
      
      const timestamp = new Date().toISOString().slice(0, 10)
      const cleanName = company.name.replace(/[^a-zA-Z0-9]/g, '_')
      const filename = `${cleanName}_${type.toUpperCase()}_Dashboard_${timestamp}.pdf`
      
      const link = document.createElement('a')
      link.href = url
      link.download = filename
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)

      console.log(`PDF exported successfully: ${filename}`)

    } catch (error) {
      console.error('Failed to generate PDF:', error)
      throw new Error(`PDF generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      if (browser) {
        await browser.close()
      }
    }
  }

  // Alternative method: Export specific dashboard sections
  public static async exportDashboardSections(options: PuppeteerPDFOptions & {
    sections: string[] // CSS selectors for specific sections
  }): Promise<void> {
    const { company, title, type, dashboardUrl, sections } = options

    let browser: puppeteer.Browser | null = null

    try {
      browser = await puppeteer.launch({ headless: true })
      const page = await browser.newPage()

      await page.setViewport({ width: 1200, height: 800, deviceScaleFactor: 2 })
      await page.goto(dashboardUrl, { waitUntil: 'networkidle2' })
      await page.waitForTimeout(3000)

      // Hide everything except selected sections
      await page.evaluate((sectionsToShow) => {
        // Hide all content first
        document.body.style.visibility = 'hidden'
        
        // Show only selected sections
        sectionsToShow.forEach((selector: string) => {
          const elements = document.querySelectorAll(selector)
          elements.forEach((el: Element) => {
            (el as HTMLElement).style.visibility = 'visible'
          })
        })
      }, sections)

      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: { top: '0.5in', bottom: '0.5in', left: '0.5in', right: '0.5in' }
      })

      // Download logic same as above...
      const blob = new Blob([pdfBuffer], { type: 'application/pdf' })
      const url = URL.createObjectURL(blob)
      
      const timestamp = new Date().toISOString().slice(0, 10)
      const cleanName = company.name.replace(/[^a-zA-Z0-9]/g, '_')
      const filename = `${cleanName}_${type.toUpperCase()}_Sections_${timestamp}.pdf`
      
      const link = document.createElement('a')
      link.href = url
      link.download = filename
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)

    } catch (error) {
      console.error('Failed to generate sectioned PDF:', error)
      throw new Error(`PDF generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      if (browser) {
        await browser.close()
      }
    }
  }

  // Method to capture full-page dashboard with pagination
  public static async exportFullDashboard(options: PuppeteerPDFOptions): Promise<void> {
    const { company, title, type, dashboardUrl } = options

    let browser: puppeteer.Browser | null = null

    try {
      browser = await puppeteer.launch({ 
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      })
      
      const page = await browser.newPage()

      // Set mobile viewport to capture more content vertically
      await page.setViewport({ 
        width: 1400, 
        height: 900, 
        deviceScaleFactor: 2 
      })

      await page.goto(dashboardUrl, { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      })

      // Wait for dynamic content
      await page.waitForTimeout(5000)

      // Optimize page for PDF
      await page.addStyleTag({
        content: `
          /* Remove fixed positioning that can cause issues */
          * {
            position: static !important;
          }
          
          /* Ensure full width utilization */
          .container, .max-w-7xl {
            max-width: 100% !important;
            margin: 0 !important;
            padding: 20px !important;
          }
          
          /* Hide navigation and export buttons */
          nav, .navbar, .pdf-hide, .no-print, 
          button[class*="export"], [id*="export"] {
            display: none !important;
          }
          
          /* Optimize spacing for PDF */
          .grid {
            gap: 1rem !important;
            page-break-inside: avoid;
          }
          
          /* Ensure charts render properly */
          canvas, svg {
            max-width: 100% !important;
            height: auto !important;
          }
          
          /* Print-friendly backgrounds */
          body {
            background: white !important;
          }
          
          /* Page break optimization */
          .widget, .card, .dashboard-section {
            page-break-inside: avoid;
            break-inside: avoid;
          }
        `
      })

      // Add professional header
      await page.evaluate((companyName, reportTitle, reportType) => {
        const headerHtml = `
          <div style="
            background: linear-gradient(135deg, #7CB342 0%, #2E7D32 100%);
            color: white;
            padding: 30px;
            margin: -20px -20px 30px -20px;
            text-align: center;
            font-family: 'Helvetica', sans-serif;
          ">
            <h1 style="margin: 0; font-size: 28px; font-weight: bold;">${companyName}</h1>
            <h2 style="margin: 10px 0 0 0; font-size: 20px; opacity: 0.9;">${reportTitle}</h2>
            <p style="margin: 5px 0 0 0; font-size: 14px; opacity: 0.8;">
              Generated on ${new Date().toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </p>
          </div>
        `
        
        const firstElement = document.body.firstElementChild
        if (firstElement) {
          firstElement.insertAdjacentHTML('beforebegin', headerHtml)
        }
      }, company.name, title, type)

      // Generate high-quality PDF
      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '0.3in',
          bottom: '0.3in', 
          left: '0.3in',
          right: '0.3in'
        },
        displayHeaderFooter: true,
        headerTemplate: `
          <div style="font-size: 10px; color: #666; width: 100%; text-align: center; margin-top: 10px;">
            ${company.name} - ${title}
          </div>
        `,
        footerTemplate: `
          <div style="font-size: 10px; color: #666; width: 100%; display: flex; justify-content: space-between; padding: 0 20px;">
            <span>CONFIDENTIAL</span>
            <span>Page <span class="pageNumber"></span> of <span class="totalPages"></span></span>
            <span>${new Date().toLocaleDateString()}</span>
          </div>
        `,
        scale: 0.9,
        preferCSSPageSize: false
      })

      // Create download
      const blob = new Blob([pdfBuffer], { type: 'application/pdf' })
      const url = URL.createObjectURL(blob)
      
      const timestamp = new Date().toISOString().slice(0, 10)
      const cleanName = company.name.replace(/[^a-zA-Z0-9]/g, '_')
      const filename = `${cleanName}_${type.toUpperCase()}_Complete_Dashboard_${timestamp}.pdf`
      
      const link = document.createElement('a')
      link.href = url
      link.download = filename
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)

      console.log(`Complete dashboard PDF exported: ${filename}`)

    } catch (error) {
      console.error('Failed to generate full dashboard PDF:', error)
      throw new Error(`PDF generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      if (browser) {
        await browser.close()
      }
    }
  }
}